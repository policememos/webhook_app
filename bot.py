import random
import os

import logging
from aiogram import Bot, Dispatcher, executor, types, asyncio
from aiogram.utils.exceptions import BotBlocked
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove




bot = Bot(token=os.getenv('telebot'))
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)


async def start(_):
    print("________________________________________________\n________________Bot is ONLINE___________________\n")
# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –±–ª–æ–∫–∞ —é–∑–µ—Ä–æ–º
@dp.message_handler(commands="block")
async def cmd_block(message: types.Message):
    await asyncio.sleep(10.0)  # –ó–¥–æ—Ä–æ–≤—ã–π —Å–æ–Ω –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
    await message.reply("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")
@dp.errors_handler(exception=BotBlocked)
async def error_bot_blocked(update: types.Update, exception: BotBlocked):
    # Update: –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç Telegram. Exception: –æ–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∫–∞–∫-—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    print(f"–ú–µ–Ω—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n–°–æ–æ–±—â–µ–Ω–∏–µ: {update}\n–û—à–∏–±–∫–∞: {exception}")

    # –¢–∞–∫–æ–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–æ–ª–∂–µ–Ω –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True,
    # –µ—Å–ª–∏ –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
    return True

# –†–µ–∞–∫—Ü–∏—è –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —é–∑–µ—Ä–∞
# @dp.message_handler()
# async def namefun(message: types.Message):
#     await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.text}!")
    
    
# –†–µ–∞–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥—É answer - —Å–æ–æ–±—â–µ–Ω–∏–µ–º
@dp.message_handler(commands='answer' ,commands_prefix = '3')
async def cmd_answer(message: types.Message):
    await message.answer("–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")

# –†–µ–∞–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥—É answer - –æ—Ç–≤–µ—Ç–æ–º 
@dp.message_handler(commands="reply")
async def cmd_reply(message: types.Message):
    await message.reply('–≠—Ç–æ –æ—Ç–≤–µ—Ç —Å "–æ—Ç–≤–µ—Ç–æ–º"')

# –†–µ–∞–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥—É answer - –∫–∏–Ω—É—Ç—å emoji    
@dp.message_handler(commands="dice")
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üëãüèº")
    

# async def show_buttons(message: types.message):
#     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     buttons = ["–î–∞", "–ù–µ—Ç"]
#     keyboard.add(*buttons)
#     await message.answer_dice(emoji="üé∞")
#     await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ –∏–≥—Äe black jack!',reply_markup=keyboard)
#     await message.answer('–°—ã–≥—Ä–∞–µ–º?')

# @dp.message_handler(commands='start')
async def send_welcome(message: types.message): 
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = ["–î–∞–≤–∞–π"]
    keyboard.add(*buttons)
    await message.answer_dice(emoji="üé∞")
    await asyncio.sleep(1.0)
    await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ –∏–≥—Äe black jack!')
    await asyncio.sleep(1.0)
    await message.answer('–°—ã–≥—Ä–∞–µ–º?',reply_markup=keyboard)
    
    
    





#___________________________________________________________________________________________
    
     
# –§—É–Ω–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º "–¥–∞–≤–∞–π"
async def with_puree(message: types.Message):
    # await message.answer('–∏–∏–∏...', reply_markup=ReplyKeyboardRemove())
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–î–∞", "–ù–µ—Ç"]
    keyboard.add(*buttons)
    await message.answer('–ü–æ–µ–µ—Ö–∞–ª–∏',reply_markup=keyboard)

    all_card = [6,7,8,9,10,'–í–∞–ª–µ—Ç','–î–∞–º–∞','–ö–æ—Ä–æ–ª—å','–¢—É–∑']
    all_mast = ['–ü–∏–∫–∏','–ß–µ—Ä–≤—ã', '–ë—É–±–Ω—ã', '–¢—Ä–µ—Ñ—ã']
    card_counter = 2
    card_counter_bot = 2
    card_sum = 0
    card_sum_bot = 0
    card_pool = [[x,y] for x in all_card for y in all_mast] 
    card_int1, card_int2 = 0,0  
  
    async def check(current_card):
        card = 0
        try:
            if current_card:
                card = current_card
                return card
    
        except:
            temp = {
                '–í–∞–ª–µ—Ç': 2,
                '–î–∞–º–∞': 3,
                '–ö–æ—Ä–æ–ª—å': 4,
                '–¢—É–∑': 11
                
            }
            if current_card in temp:
                card = temp[current_card]
                return card
            else:
                print('CHEK CARD ERROR')

    def randCard():
        nonlocal card_pool
        current_card = random.choice(card_pool)
        temp_pool = []
        for key in card_pool:
            index = card_pool.index(key)
            if key != current_card:
                temp_pool.append(key)
        card_pool = temp_pool   
        return current_card


    card_int1, card_int2 = randCard(), randCard()
    card_sum_bot = check(card_int1[0]) + check(card_int2[0])
    card_bot_pool = [card_int1,card_int2]

    card_int1, card_int2 = randCard(), randCard()
    card_sum = check(card_int1[0]) + check(card_int2[0])
    card_user_pool = [card_int1, card_int2]
    
    


    



#**********************STATA OF CARDS*********************
    def cardstat():
        #print(f'–°—É–º–º–∞ –≤–∞—à–∏—Ö –∫–∞—Ä—Ç: {card_sum}')
        message.answer(f'–°—É–º–º–∞ –≤–∞—à–∏—Ö –∫–∞—Ä—Ç: {card_sum}')
        message.answer(f'–°—É–º–º–∞ –∫–∞—Ä—Ç –±–æ—Ç–∞: {card_sum_bot}\n')
        message.answer('–í–∞—à–∏ –∫–∞—Ä—Ç—ã:')
        q=1
        for i in card_user_pool:
            message.answer(f"{q}) {i[0]}, –º–∞—Å—Ç—å '{i[1]}' ")
            q += 1
        message.answer('–ö–∞—Ä—Ç—ã –±–æ—Ç–∞:\n')
        q=1
        for i in card_bot_pool:
            message.answer(f"{q}) {i[0]}, –º–∞—Å—Ç—å '{i[1]}' ")
            q += 1


#*********************BOT AI*******************

    def botAI():
        nonlocal card_sum_bot
        nonlocal card_bot_pool
        nonlocal card_counter_bot
        while card_counter_bot < 6:
            current_card_bot = randCard()
            card_int_bot = check(current_card_bot[0])
            try_int = card_int_bot + card_sum_bot
            if try_int < 21:
                card_bot_pool.append(current_card_bot)
                card_sum_bot = try_int
                card_counter_bot += 1
            else:
                return card_sum_bot
        return card_sum_bot
    cardstat()


if __name__ == "__main__":
    dp.register_message_handler(send_welcome, commands='start')
    dp.register_message_handler(with_puree, Text(equals="–î–∞–≤–∞–π"))
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True, on_startup=start)